<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
	<flow name="implementation-get-history1"
		doc:id="1679982a-6345-4013-a4cc-37936cf43849">
		<flow-ref doc:name="implementation-get-history-select"
			doc:id="6f662e8d-26f4-4daa-8104-a9f17fb18269"
			name="implementation-get-history-select" />
		<error-handler>
			<on-error-propagate type="ANY">
				<set-variable variableName="customErrorMessage"
					value="#[error.description]" doc:name="customErrorMessage" />
				<logger level="ERROR"
					message="#['Erro encontrado: ' ++ vars.customErrorMessage]"
					doc:name="CustomErrorMessage" />
				<ee:transform>
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    'Mensagem': vars.customErrorMessage default 'Erro desconhecido'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>

			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="implementation-get-history-select1"
		doc:id="732d5a70-e2c2-4f6f-926f-efb414b34356">
		<logger level="INFO" message="#[payload]" doc:name="Payload" />
		<flow-ref doc:name="Validate Account Number"
			doc:id="465c90f9-8001-4b06-ad1f-b89f62ddca05"
			name="validate-account-number" />
		<db:select doc:name="Check if extract already generated"
			config-ref="Database_Config">
			<db:sql><![CDATA[SELECT last_query_date 
FROM queries_extracts 
WHERE account_number = :account_number 
AND EXTRACT(MONTH FROM last_query_date) = EXTRACT(MONTH FROM CURRENT_DATE)
AND EXTRACT(YEAR FROM last_query_date) = EXTRACT(YEAR FROM CURRENT_DATE);
]]></db:sql>
			<db:input-parameters><![CDATA[#[{
    account_number: vars.account_number,
    currentMonth: vars.currentMonth,
    currentYear: vars.currentYear  
}]]]></db:input-parameters>
		</db:select>
		<ee:transform doc:name="Set Condition Variable">
			<ee:variables>
				<ee:set-variable variableName="isPayloadNotEmpty"><![CDATA[ payload != null and sizeOf(payload) > 0
        ]]></ee:set-variable>
				<ee:set-variable variableName="isDateValid"><![CDATA[if (vars.startDate as Date {format: "yyyy-MM-dd"} < (now() - |P31D|)) false else true]]>
				</ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice"
			doc:id="d06a3b47-5082-40e2-958b-a299f9b64ff6">
			<when expression="#[vars.isDateValid == false]">
				<ee:transform doc:name="Transform Message"
					doc:id="bf94cce8-5af0-4bb6-8395-4ffca1609c21">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    "status": "erro",
    "mensagem": "O intervalo de datas fornecido não é válido. Por favor, escolha um intervalo dentro do último 30 dias."
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Payload"
					doc:id="35736d5e-9808-4e07-86d4-243332a3fa07" message="#[payload]" />
			</when>
			<when expression="#[vars.isPayloadNotEmpty]">
				<flow-ref doc:name="implementation-get-balance-main"
					doc:id="71f9a16d-b4a4-452e-83d1-7bb40c111d8f"
					name="implementation-get-balance-main" />
				<set-variable value="#[payload]" doc:name="getBalance"
					doc:id="5792160a-bbfd-4ddb-97a7-8f084799c8a0"
					variableName="getBalance" />
				<set-variable value="404" doc:name="Set HTTP Status"
					doc:id="bd060678-0556-4541-854a-01be1fc7411f"
					variableName="httpStatus" />
				<db:select doc:name="Select account_number"
					doc:id="d125c9f4-9fe0-4761-a436-14b601635477"
					config-ref="Database_Config">
					<db:sql><![CDATA[   SELECT 
    *
  FROM queries_extracts
   WHERE account_number = :account_number]]></db:sql>
					<db:input-parameters><![CDATA[#[account_number: vars.account_number]]]></db:input-parameters>
				</db:select>
				<ee:transform doc:name="Transform Message"
					doc:id="bd8e91fa-35fe-4246-ac8a-ad541f6e86dc">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{	"Data": vars.getBalance.balances.item.Data,
	"Saldo": vars.getBalance.balances.item.Saldo,
	"Numero Conta": vars.getBalance.balances.item.NumeroConta,
	"Extrato":{
		"status": "erro",
		"mensagem": "Ops! Não é permitido fazer mais de um extrato por mês.\nSó poderá fazer uma consulta a partir de: " ++ (payload.last_query_date[0] + |P30D|) as String {format: "dd-MM-yyyy"}
	} 
}
]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Payload"
					doc:id="66cda11d-a937-4ddf-8f9b-70c82ebef632" message="#[payload]" />
			</when>
			<otherwise>
				<db:select doc:name="Get Accont-Id"
					doc:id="a6ff7704-9aa1-4082-9f46-dbc419c7fb4e"
					config-ref="Database_Config">
					<db:sql><![CDATA[select account_id from mule_account where account_number = :account_number]]></db:sql>
					<db:input-parameters><![CDATA[#[{
	account_number: vars.account_number
}]]]></db:input-parameters>
				</db:select>
				<set-variable value="#[payload.account_id]"
					doc:name="account_id" doc:id="281ba502-88c6-43ae-914f-591786075f20"
					variableName="account_id" />
				<db:select doc:name="Get History"
					doc:id="ac92a4ab-9c60-41e4-ab69-50e66f1295dd"
					config-ref="Database_Config">
					<db:sql><![CDATA[SELECT
    t.*,
    a.name as to_account_name,
    a.balance,
    a.account_number,
    CASE 
        WHEN t.types = 'DEPOSIT' THEN a.name
        WHEN t.types = 'WITHDRAWAL' THEN a.name
        ELSE f.name
    END as from_account_name
FROM mule_transaction t
    JOIN mule_account a ON t.account_id = a.account_id
    LEFT JOIN mule_account f ON t.from_account_id = f.account_id
WHERE t.account_id = :account_id
    AND DATE(t.date_transaction) BETWEEN :startDate AND :endDate
ORDER BY t.date_transaction DESC;
]]></db:sql>
					<db:input-parameters><![CDATA[#[{
    account_id: payload[0].account_id,
    startDate: vars.startDate,
    endDate: vars.endDate
}]]]></db:input-parameters>
				</db:select>
				<set-variable value="#[payload]" doc:name="getHistory"
					doc:id="96af30bd-9a02-443c-9f53-ea8e0d061308"
					variableName="getHistory" />
				<logger level="INFO" doc:name="Payload"
					doc:id="9b7c63e6-fc0c-4cad-8ed5-ac77402bfbbd" message="#[payload]" />
				<choice doc:name="Check if Payload is Empty">
					<when expression="#[payload == null or sizeOf(payload) == 0]">
						<ee:transform doc:name="Set Payload for Empty Result">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    "status": "info",
    "message": "Não há transações no período especificado."
}
]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<logger level="INFO" doc:name="Payload"
							doc:id="4ccc1af5-2d4a-4468-949a-e285f7c7fd7e"
							message="#[payload]" />
					</when>
					<otherwise>
						<!-- Your existing logic for when payload is not empty -->
						<db:insert doc:name="Insert or Update Last Query Date"
							config-ref="Database_Config">
							<db:sql><![CDATA[INSERT INTO queries_extracts (account_number, last_query_date)
VALUES (:account_number, CURRENT_DATE)
ON CONFLICT (account_number) DO UPDATE SET last_query_date = CURRENT_DATE;
]]>
            </db:sql>
							<db:input-parameters><![CDATA[#[{
   account_number: vars.account_number,
}]]]>
            </db:input-parameters>
						</db:insert>
						<ee:transform doc:name="Transform Message"
							doc:id="4fdf6d4a-ea26-466c-96dd-ab35f5fe3257">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	"Numero da conta": vars.getHistory[0].account_number,
	"Nome": vars.getHistory[0].to_account_name,
	"Saldo": vars.getHistory[0].balance,
	"Data": now() as Date {format: "dd/MM/yyyy"} as String {format: "dd MMM, yyyy"},
	"Transações": vars.getHistory map (item) -> {
		"Data": item.date_transaction as String {format: "dd-MM-yyyy"},
		"Horas": item.date_transaction as String {format: "HH:mm:ss"},    
	    "Tipo de transação": item.types,
	    "Valor": item.amount,
	    "De": item.from_account_name
	}filterObject (value, key) -> value != null
}]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<logger level="INFO" doc:name="Payload"
							doc:id="263e3788-4856-4f55-899d-ddd1e8bb7555"
							message="#[payload]" />

					</otherwise>
				</choice>
			</otherwise>
		</choice>
	</flow>
</mule>