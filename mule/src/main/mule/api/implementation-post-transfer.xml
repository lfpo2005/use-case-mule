<mule xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd">
	<flow name="implementation-post-transfer-main"
		doc:id="410eb2b9-8a33-44ad-a33b-c41e3f5d2965">
		<flow-ref doc:name="Flow Reference-Fron"
			doc:id="ba2fc54b-f349-4b43-b90d-48a1571020ff"
			name="implementation-post-transfer-from" />
		<flow-ref doc:name="Flow Reference-To"
			doc:id="50f38237-3a2a-421c-a2f6-8e2de2e2dd5b"
			name="implementation-post-transfer-to" />
		<flow-ref doc:name="Flow Reference-Publish" doc:id="8489e4e4-00bb-4733-8e8c-38f23459681c" name="implementation-post-transfer-publish"/>
		<flow-ref doc:name="Flow Reference-Consume"
			doc:id="17f2d30e-0b3c-43e3-9f62-2069150b0c51"
			name="implementation-post-transfer-consume" />
		<error-handler>
			<on-error-propagate type="ANY">
				<set-variable variableName="customErrorMessage"
					value="#[error.description]" doc:name="customErrorMessage"/>
				<set-variable value="404" doc:name="Set HTTP Status" doc:id="6f1302f1-093d-4bb3-beb4-670c5116e5b4" variableName="httpStatus" />
				<logger level="ERROR"
					message="#['Erro encontrado: ' ++ vars.customErrorMessage]" doc:name="customErrorMessage"/>
				<ee:transform>
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    'Mensagem': vars.customErrorMessage default 'Erro desconhecido'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			
</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="implementation-post-transfer-from">
		<logger level="INFO"
			message="Transfer from account: #[vars.from_account_number] to account: #[vars.to_account_number] with amount: #[vars.amount]" doc:name="customMessage"/>

		<flow-ref doc:name="Flow Reference" doc:id="daf7efda-f73d-45ec-a899-f76755320490" name="validate-amount"/>
		<db:select config-ref="Database_Config" doc:name="Select from_account_number">
			<db:sql><![CDATA[SELECT * FROM mule_account WHERE account_number = :from_account_number]]></db:sql>
			<db:input-parameters><![CDATA[#[{
	'from_account_number': vars.from_account_number
}]]]></db:input-parameters>
		</db:select>
		<choice>
			<when
				expression="#[(payload[0].account_number default 0) as Number != null and (vars.from_account_number default 0) as Number == (payload[0].account_number default 0) as Number]">
				<set-variable value="#[payload[0]]"
					variableName="fromAccountInfo" doc:name="fromAccountInfo"/>
			</when>
			<otherwise>
				<raise-error type="CUSTOM:INVALID_ACCOUNT"
					description="Número da conta de origem inválido." doc:name="CUSTOM:INVALID_ACCOUNT"/>
			</otherwise>
		</choice>
		<error-handler>
			<on-error-propagate type="CUSTOM:INVALID_ACCOUNT">
				<logger level="ERROR"
					message="Falha na execução da query. Possível conta inexistente." doc:name="CUSTOM:INVALID_ACCOUNT"/>
				<ee:transform>
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    'Mensagem': 'Falha na execução da query. Verifique as informações da conta.'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			
</on-error-propagate>
		</error-handler>

	</flow>
	<flow name="implementation-post-transfer-to"
		doc:id="2d167c67-b0c6-4d87-908d-42450f17713e">
		<logger level="INFO" doc:name="Payload"
			doc:id="aa06db9c-e34a-4f16-95b0-1988c77cf122" message="#[payload]" />
		<db:select config-ref="Database_Config" doc:name="Select to_account_number">
			<db:sql><![CDATA[SELECT * FROM mule_account WHERE account_number = :to_account_number]]></db:sql>
			<db:input-parameters><![CDATA[#[{
	'to_account_number': vars.to_account_number
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice"
			doc:id="1e4e492a-31f4-4034-afbb-13a43dd2bdf4">
			<when
				expression="#[(payload[0].account_number default 0) as Number != null and (vars.to_account_number default 0) as Number == (payload[0].account_number default 0) as Number]">
				<set-variable value="#[payload[0]]"
					variableName="toAccountInfo" doc:name="toAccountInfo"/>
			</when>
			<otherwise>
				<raise-error doc:name="CUSTOM:INVALID_ACCOUNT"
					doc:id="8df9c2e8-46f1-4dba-ab3b-1a91b2bb785c"
					type="CUSTOM:INVALID_ACCOUNT"
					description="Número da conta de destino inválido." />
			</otherwise>
		</choice>
		<error-handler>
			<on-error-propagate type="DB:QUERY_EXECUTION">
				<logger level="ERROR"
					message="Falha na execução da query. Possível conta inexistente." doc:name="CUSTOM:INVALID_ACCOUNT"/>
				<ee:transform doc:name="Transform Message"
					doc:id="7105c733-4120-4977-8dec-4aa17961104e">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
'Mensagem': 'Falha na transferência: verifique o número da conta de destino'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="implementation-post-transfer-publish" doc:id="4830ddee-dc88-4344-90dc-d8bbeef7d2cd" >
		<logger level="INFO" doc:name="Payload" doc:id="bf5b18bc-816e-4396-81fc-f7dfe719023c" message="payload"/>
		<ee:transform doc:name="Transform Message" doc:id="369f0c93-858f-47ad-9b9c-23740cf60d37" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	account_number: payload.account_number,
	account_id: payload.account_id,
	balance: payload.balance,
	name: payload.name,
	to_account_number: vars.to_account_number,
	from_account_number: vars.from_account_number,
	amount: vars.amount,
	fromAccountInfo: {
		account_number: vars.fromAccountInfo.account_number,
		account_id: vars.fromAccountInfo.account_id,
		balance: vars.fromAccountInfo.balance,
		name: vars.fromAccountInfo.name
	},
	toAccountInfo: {
		account_number: vars.toAccountInfo.account_number,
		account_id: vars.toAccountInfo.account_id,
		balance: vars.toAccountInfo.balance,
		name: vars.toAccountInfo.name
	}
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<jms:publish doc:name="Publish-stg-transfer" doc:id="9f3999cc-2a42-45e2-9fb1-e65e750acbe5" config-ref="JMS_Config" destination="stg-transfer"/>
	</flow>
	<flow name="implementation-post-transfer-consume"
		doc:id="310c7195-bfc5-4969-a2b7-6002c8ebd492">
		<set-payload value="#[null]" doc:name="null" doc:id="12d7bf21-d3cd-4c20-80cf-ee059eec4072" />
		<jms:consume doc:name="Consume-stg-transfer" doc:id="c8820b07-7c7e-4d6e-9e89-f7c2a3bdd6e8" config-ref="JMS_Config" destination="stg-transfer" maximumWait="30000"/>
		<set-variable value="#[payload]" doc:name="newData" doc:id="c6238447-047d-4a51-b69c-c2a8718d7054" variableName="newData"/>
		<logger level="INFO" doc:name="Payload" doc:id="00fb43f1-9a3d-4799-985c-ad8e249fb0d0" message="#[payload]"/>
		<choice>
			<when
				expression="#[(vars.amount != null) and (vars.fromAccountInfo.balance != null) and (vars.amount &gt; 0) and (vars.amount &lt;= vars.fromAccountInfo.balance)]">
				<!-- Update From Account Balance -->
				<db:update config-ref="Database_Config"
					doc:name="Update-get-amount">
					<db:sql><![CDATA[UPDATE mule_account SET balance = balance - :amount WHERE account_id = :account_id]]></db:sql>
					<db:input-parameters><![CDATA[#[{
	'amount': vars.newData.amount,
	'account_id': vars.newData.fromAccountInfo.account_id
}]]]></db:input-parameters>
				</db:update>
				<db:update config-ref="Database_Config"
					doc:name="Update-post-amount">
					<db:sql><![CDATA[UPDATE mule_account SET balance = balance + :amount WHERE account_id = :account_id]]></db:sql>
					<db:input-parameters><![CDATA[#[{
	'amount': vars.newData.amount,
	'account_id': vars.newData.toAccountInfo.account_id
}]]]></db:input-parameters>
				</db:update>
				<db:insert config-ref="Database_Config"
					doc:name="Insert-from">
					<db:sql><![CDATA[INSERT INTO mule_transaction(account_id, from_account_id, types, amount, date_transaction) VALUES (:account_id, :from_account_id, :types, :amount, now())]]></db:sql>
					<db:input-parameters><![CDATA[#[{
	'account_id': vars.newData.fromAccountInfo.account_id,
	'to_account_id': vars.newData.toAccountInfo.account_id, 
	'from_account_id': vars.newData.fromAccountInfo.account_id,
	'types': 'TRANSFER_OUT',
	'amount': vars.newData.amount
	
}]]]></db:input-parameters>
				</db:insert>
				<db:insert config-ref="Database_Config"
					doc:name="Insert-to">
					<db:sql><![CDATA[INSERT INTO mule_transaction(account_id, from_account_id, types, amount, date_transaction) VALUES (:account_id, :from_account_id, :types, :amount, now())]]></db:sql>
					<db:input-parameters><![CDATA[#[{
	'account_id': vars.newData.toAccountInfo.account_id,
	'from_account_id': vars.newData.fromAccountInfo.account_id,
	'types': 'TRANSFER_IN',
	'amount': vars.newData.amount
}]]]></db:input-parameters>
				</db:insert>
				<ee:transform doc:name="Transform Message"
					doc:id="66096158-2264-4b2d-9b4b-f2c537fb9a56">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	'Mensagem': "Transferência feita com sucesso"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Payload" doc:id="a2aa6ce1-c91d-4112-b960-6654317b58eb" message="#[payload]" />
			
</when>
			<otherwise>
				<ee:transform doc:name="Transform Message"
					doc:id="95dc9509-9062-4f55-84f2-9e9fc59f1e0e">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	'Mensagem': 'Falha na transferência: saldo insuficiente ou valor inválido'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Payload" doc:id="e61fcd47-e495-4e1c-99fd-4683778a8802" message="#[payload]" />
			
</otherwise>
		</choice>
		<error-handler>
			<on-error-continue type="DB:QUERY_EXECUTION">
				<logger level="ERROR"
					message="Falha na execução da query. Possível conta inexistente." doc:name="Custom:ErroMsg"/>
				<ee:transform doc:name="Transform Message">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
     'Mensagem': 'Falha na execução da query. Verifique as informações da conta.'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-continue>
		</error-handler>
	</flow>
</mule>